type Usuario {
  ID: ID!
  Nome: String
  Idade: Int
  playlists: [Playlist]
}

type Playlist {
  ID: ID!
  Nome: String
  usuario: Usuario
  musicas: [Musica]
}

type Musica {
  ID: ID!
  Nome: String
  Artista: String
  playlists: [Playlist]
}

type PlaylistMusica {
  ID: ID!
  playlist: Playlist
  musica: Musica
}

type Query {
  usuarios: [Usuario]
  usuario(ID: ID!): Usuario
  playlists: [Playlist]
  playlist(ID: ID!): Playlist
  musicas: [Musica]
  musica(ID: ID!): Musica
  allSongs: [Musica]
  userPlaylists(userID: ID!): [Playlist]
  playlistSongs(playlistID: ID!): [Musica]
  playlistsContainingSong(songID: ID!): [Playlist]
}

type Mutation {
  createUsuario(Nome: String, Idade: Int): Usuario
  updateUsuario(ID: ID!, Nome: String, Idade: Int): Usuario
  deleteUsuario(ID: ID!): Boolean
  createPlaylist(Nome: String, Usuario_ID: Int): Playlist
  updatePlaylist(ID: ID!, Nome: String, Usuario_ID: Int): Playlist
  deletePlaylist(ID: ID!): Boolean
  createMusica(Nome: String, Artista: String): Musica
  updateMusica(ID: ID!, Nome: String, Artista: String): Musica
  deleteMusica(ID: ID!): Boolean
  addMusicaToPlaylist(Playlist_ID: ID!, Musica_ID: ID!): PlaylistMusica
  removeMusicaFromPlaylist(Playlist_ID: ID!, Musica_ID: ID!): Boolean
}
